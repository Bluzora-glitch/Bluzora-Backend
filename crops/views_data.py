import pandas as pd
import os
import re
from datetime import datetime
from django.utils.timezone import make_aware
from django.http import JsonResponse
from django.db import transaction, IntegrityError
from .models import Crop, CropVariable
from django.shortcuts import render

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
def home(request):
    return render(request, 'home.html')

def convert_thai_date(thai_date):
    """ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD """
    month_map = {
        "‡∏°.‡∏Ñ.": "01", "‡∏Å.‡∏û.": "02", "‡∏°‡∏µ.‡∏Ñ.": "03", "‡πÄ‡∏°.‡∏¢.": "04",
        "‡∏û.‡∏Ñ.": "05", "‡∏°‡∏¥.‡∏¢.": "06", "‡∏Å.‡∏Ñ.": "07", "‡∏™.‡∏Ñ.": "08",
        "‡∏Å.‡∏¢.": "09", "‡∏ï.‡∏Ñ.": "10", "‡∏û.‡∏¢.": "11", "‡∏ò.‡∏Ñ.": "12"
    }
    
    try:
        match = re.search(r"(\d{1,2})\s(‡∏°\.‡∏Ñ\.|‡∏Å\.‡∏û\.|‡∏°‡∏µ\.‡∏Ñ\.|‡πÄ‡∏°\.‡∏¢\.|‡∏û\.‡∏Ñ\.|‡∏°‡∏¥\.‡∏¢\.|‡∏Å\.‡∏Ñ\.|‡∏™\.‡∏Ñ\.|‡∏Å\.‡∏¢\.|‡∏ï\.‡∏Ñ\.|‡∏û\.‡∏¢\.|‡∏ò\.‡∏Ñ\.)\s(\d{4})", thai_date)
        if not match:
            raise ValueError("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        day, thai_month, thai_year = match.groups()
        month = month_map.get(thai_month.strip(), None)
        if not month:
            raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        
        year = int(thai_year) - 543  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.
        return f"{year}-{month}-{day.zfill(2)}"
    except Exception as e:
        print(f"‚ùå ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {thai_date} ‚Üí {e}")
        return None

def update_crop_prices_from_request(request):
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å path ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å query parameter
    (‡πÄ‡∏ä‡πà‡∏ô /update-prices/?file=prices_downloaded.xls) ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô API Django
    ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå crops_price
    """
    # ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å query parameter 'file'
    file_name = request.GET.get('file')
    if not file_name:
        return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå xls ‡∏ú‡πà‡∏≤‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå 'file'"}, status=400)
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î base path ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå crops_price
    base_path = "D:/Bluzora-Backend/crops_price/"
    file_path = os.path.join(base_path, file_name)
    
    success = update_crop_prices(file_path, file_name)
    
    if success:
        return JsonResponse({"message": f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {file_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"})
    else:
        return JsonResponse({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {file_name}"}, status=400)


def update_crop_prices(file_path, file_name):
    """
    ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡∏ä‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∑‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏° (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ nan)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô tuple (success, skipped_summary) ‡πÇ‡∏î‡∏¢ skipped_summary ‡πÄ‡∏õ‡πá‡∏ô dictionary
    ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°: 
      {"crop": ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡∏ä, "date": ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, "skipped_count": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)}
    """
    if not os.path.exists(file_path):
        print(f"üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path}")
        return False, {"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå"}

    try:
        df_list = pd.read_html(file_path)
        df = df_list[0]
    except Exception as e:
        print(f"üö´ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå {file_name} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        return False, {"error": str(e)}
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    rename_map = {
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': 'date',
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': 'category',
        '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        '‡∏´‡∏ô‡πà‡∏ß‡∏¢': '‡∏´‡∏ô‡πà‡∏ß‡∏¢',
        '‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î',
        '‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
        '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'
    }
    df.rename(columns=rename_map, inplace=True, errors='ignore')

    try:
        df = df[['date', '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î']]
    except KeyError:
        print(f"üö´ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå {file_name} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return False, {"error": "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}
    
    skipped_entries = []  # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ nan

    with transaction.atomic():
        for _, row in df.iterrows():
            crop_name = row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].strip()
            raw_date = row['date'].strip()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô valid number ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if pd.isna(row['‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢']) or pd.isna(row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î']) or pd.isna(row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î']):
                print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á {crop_name} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {raw_date} ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß")
                skipped_entries.append((crop_name, raw_date))
                continue

            try:
                avg_price = float(row['‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'])
                min_price = float(row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î'])
                max_price = float(row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'])
            except Exception as e:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á {crop_name} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {raw_date}: {e}")
                skipped_entries.append((crop_name, raw_date))
                continue

            converted_date = convert_thai_date(raw_date)
            if not converted_date:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {raw_date} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {crop_name} ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß")
                skipped_entries.append((crop_name, raw_date))
                continue

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô Crop (‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö)
            crop, created = Crop.objects.get_or_create(
                crop_name=crop_name,
                defaults={"unit": "‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°", "grow_duration": 90}
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CropVariable
            CropVariable.objects.update_or_create(
                crop=crop,
                date=converted_date,
                defaults={
                    "average_price": avg_price,
                    "min_price": min_price,
                    "max_price": max_price,
                    "file_name": file_name  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                }
            )
    
    # ‡∏™‡∏£‡∏∏‡∏õ skipped_entries ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö grouped ‡πÇ‡∏î‡∏¢ (crop, date)
    skipped_summary = {}
    for crop, date_str in skipped_entries:
        key = (crop, date_str)
        if key in skipped_summary:
            skipped_summary[key] += 1
        else:
            skipped_summary[key] = 1

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
    skipped_list = []
    for (crop, date_str), count in skipped_summary.items():
        skipped_list.append({
            "crop": crop,
            "date": date_str,
            "skipped_rows": count
        })

    print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {file_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return True, {"skipped_records": skipped_list}


def update_all_crop_prices(request):
    """
    ‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå .xls ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏∞‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå, ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡∏ä, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏° (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ nan)
    """
    folder_path = "D:/Bluzora-Backend/crops_price/"
    
    if not os.path.exists(folder_path):
        return JsonResponse({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"}, status=400)
    
    files = [f for f in os.listdir(folder_path) if f.endswith(".xls")]
    if not files:
        return JsonResponse({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .xls ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"}, status=400)
    
    success_count = 0
    overall_skipped = {}  # key: file_name, value: list of skipped record details

    for file_name in files:
        file_path = os.path.join(folder_path, file_name)
        success, file_skipped_summary = update_crop_prices(file_path, file_name)
        if success:
            success_count += 1
        overall_skipped[file_name] = file_skipped_summary.get("skipped_records", [])
    
    return JsonResponse({
        "message": f"‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å {success_count} ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        "skipped_summary": overall_skipped
    })

